#1 add 1&last

def add_str(s):
    if(len(s)<2):
        return -1
    else:
        return (s[0:2]+s[(len(s)-2):len(s)])
s=input()
print(add_str(s))

#2 count char

def count_upper_lower(s):
    l=[]
    a=0
    b=0
    for i in s:
        if(i>='a' and i<='z'):
            a+=1
        elif(i>='A' and i<='Z'):
            b+=1
    l.append(b)
    l.append(a)
    return l
s=input()
print(count_upper_lower(s))
        
        
#3 generate sentence

def generate_sentences(subjects,verbs,objects):
    sentence_list=[]
    for i in subjects:
        for j in verbs:
            for k in objects:
                sentence_list.append(i+" "+j+" "+k)
    return sentence_list

subjects=list(input().split())
verbs=list(input().split())
objects=list(input().split())
s=generate_sentences(subjects,verbs,objects)
for i in s:
        print(i)
        
        
#4 no close to any one

#PF-Prac-13
import math
def close_number(num1,num2,num3):
    if(math.fabs(num1-num2)==1 and math.fabs(num3-num2)>=2 and math.fabs(num3-num1)>=2):
        return True
    elif(math.fabs(num3-num2)==1 and math.fabs(num1-num3)>=2 and math.fabs(num1-num2)>=2):
        return True
    elif(math.fabs(num3-num1)==1 and math.fabs(num2-num3)>=2 and math.fabs(num1-num2)>=2):
        return True
    else:
        return False
    
num1,num2,num3=map(int,input().split())
print(close_number(num1,num2,num3))

#5 five no
#PF-Tryout
def find_five_digit():
    num2=0
    num3=0
    num4=0
    num5=0
    for i in range(9,-1,-1):
        num2=i-2
        num3=num2-2
        num4=num3-2
        num5=num3
        if(num3+num4+num5==i and num2+num3+num4+num5+i==19):
            break
    s=str(i)+str(num2)+str(num3)+str(num4)+str(num5)
    print(s)
            

find_five_digit()
